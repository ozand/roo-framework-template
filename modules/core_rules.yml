rules:
  R01_PathsAndCWD:
    description: "All file paths must be relative to the project root. Do not use `~` or `$HOME`. Use `cd <dir> && command` to execute commands in a specific directory."
  R02_ToolAtomicity:
    description: "You MUST use only one tool per turn. It is STRICTLY FORBIDDEN to include multiple tool calls (e.g., `<write_to_file>` and `<apply_diff>`) in a single response. After using a tool, you MUST wait for the result before proceeding."
  R03_EditingToolPreference:
    description: "Prefer `apply_diff` for modifying existing files. Use `write_to_file` for new files or complete rewrites."
  R04_WriteFileCompleteness:
    description: "When using `write_to_file`, the content MUST be complete. No placeholders like `// ...` are allowed."
  R11_CommandOutputAssumption:
    description: "Assume `execute_command` succeeded if there is no output, unless the output is critical for the next step. Always verify outcomes."
  R13_FileEditPreparation:
    description: "Before editing an existing file, you MUST read its current content first using `read_file` to get correct line numbers and context for `apply_diff`."
  R14_FileEditErrorRecovery:
    description: "If `apply_diff` fails with 'File not found', retry with `write_to_file`. For all other modification errors, you MUST re-read the file with `read_file` to analyze its current state before re-attempting the modification."
  R15_ErrorFeedbackAnalysis:
    description: "If a tool call returns an error, your next <thinking> block MUST begin with an [Error Analysis] section, quoting the error and formulating a plan to fix it."
  R16_FailureLoopCircuitBreaker:
    description: "If you receive an error 3 consecutive times for the same file with the same tool, stop. Your next step must be to analyze the root cause and apply a fundamentally different strategy. If that fails, ask the user for clarification."
  R17_PostExecutionVerification:
    description: "After using `execute_command`, you MUST wait for the user's response containing the result. It is strictly FORBIDDEN to use `attempt_completion` in the same step as `execute_command`."
  R18_GitWorkflowSOP:
    description: "When performing any Git operations, you MUST strictly follow the procedure described in the `sops/08_sop_git_workflow.md` document."
  R19_PrincipleOfMinimalAction:
    description: "You must ONLY perform the task that was explicitly assigned. It is strictly FORBIDDEN to add new files or modify existing ones if it is not a direct step for completing the current task. Any suggestions for improvement must first be proposed to the user for approval."
  R20_NewFileCreation:
    description: "For creating a new file with content, you MUST use `write_to_file`. This tool automatically creates parent directories, preventing 'path not found' errors. This is more robust and efficient than using `create_new_file` which requires a separate command to create directories."
  R21_CompletionSummary:
    description: "Before using `attempt_completion`, your final `<thinking>` block MUST be a summary of the actions you successfully executed during the task. It should act as a changelog for your work. Do not re-analyze the initial state; reflect on what you have accomplished."